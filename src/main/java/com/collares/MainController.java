package com.collares;

import java.sql.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.collares.repository.PictureRepository;
import com.collares.repository.ShopRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/shops") // This means URL's start with /demo (after Application path)
public class MainController {

	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private ShopRepository shopRepository;
	@Autowired
	private PictureRepository pictureRepository;

	public MainController(ShopRepository shopRepository, PictureRepository pictureRepository) {
		super();
		this.shopRepository = shopRepository;
		this.pictureRepository = pictureRepository;
	}

	
	@PostMapping // Map ONLY POST Requests
	@ResponseBody
	public void createShop(@RequestParam String nameShop, @RequestParam int quantity) {

		Shop shop = new Shop();
		shop.setNameShop(nameShop);
		shop.setQuantity(quantity);
		shopRepository.save(shop);
	}
	
	@GetMapping
	public @ResponseBody Iterable<Shop> getAllShops() {
		return shopRepository.findAll();
	}
	
	
	@PostMapping(path = "/pictures") // Map ONLY POST Requests
	@ResponseBody
	public void createPicture(@RequestParam String nameArtist, @RequestParam double price, @RequestParam Date date) {
		
		Picture picture = new Picture();
		picture.setNameArtist(nameArtist);
		picture.setDate(date);
		picture.setPrice(price);
		pictureRepository.save(picture);
	}

	@GetMapping(path = "/pictures")
	public @ResponseBody Iterable<Picture> getAllPictures() {

		return pictureRepository.findAll();
	}
	
	@DeleteMapping(path = "/{id}/pictures")
	@ResponseBody
	public void deletePictures(@PathVariable("id") int id) {
		pictureRepository.deleteById(id);
	}
	
	@DeleteMapping(path = "/pictures")
	@ResponseBody
	public void deletePictures() {
		pictureRepository.deleteAll();
	}


}